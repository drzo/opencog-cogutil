/*
 * tests/util/LoggerUTest.cxxtest
 *
 * Copyright (C) 2002-2007 Novamente LLC
 * Copyright (C) 2008 by OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Andre Senna <senna@vettalabs.com>
 *            Gustavo Gama <gama@vettalabs.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <unistd.h>

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <fstream>
#include <iostream>
#include <atomic>
#include <thread>

#include <opencog/util/Logger.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

class LoggerUTest : public CxxTest::TestSuite
{
public:
    LoggerUTest() {}
    void setUp() {}
    void tearDown() {}

    static std::string getLastLineFromFile(const std::string& filename) {
        std::ifstream logfile(filename);
        std::string line, resline;
        if (logfile.is_open()) {
            while (logfile.good()) {
                getline(logfile, line);
                if (!line.empty())
                    resline = line;
            }
            logfile.close();
        }
        return resline;
    }

    static std::string remove_timestamp(const std::string str) {
        return str.substr(str.find(']') + 2);
    }

    void testBasicLogging()
    {
        const char* logFile = "testBasicLogging.txt";
        Logger logger(logFile);

        logger.error("Error message");
        logger.warn("Warning message");
        logger.info("Info message");
        logger.debug("Debug message");
        logger.fine("Fine message");

        std::string lastLine = getLastLineFromFile(logFile);
        TS_ASSERT(!lastLine.empty());

        remove(logFile);
    }

    void testLogLevels()
    {
        const char* logFile = "testLogLevels.txt";
        Logger logger(logFile);

        // Set level to INFO - should only log ERROR, WARN, and INFO
        logger.setLevel(Logger::INFO);

        logger.error("Error message");  // Should log
        logger.warn("Warning message"); // Should log
        logger.info("Info message");    // Should log
        logger.debug("Debug message");  // Should not log
        logger.fine("Fine message");    // Should not log

        std::ifstream file(logFile);
        std::string line;
        int lineCount = 0;
        while (std::getline(file, line)) {
            lineCount++;
        }
        file.close();

        TS_ASSERT_EQUALS(lineCount, 3);

        remove(logFile);
    }

    void testThreadIdLogging()
    {
        const char* logFile = "testThreadId.txt";
        Logger logger(logFile);
        logger.setThreadIdEnabled(true);

        std::atomic<std::thread::id> thread_id;
        std::thread thread([&]() {
            thread_id.store(std::this_thread::get_id());
            logger.info("Thread message");
        });
        thread.join();

        std::string lastLine = getLastLineFromFile(logFile);
        std::ostringstream expected;
        expected << "[Thread-" << thread_id.load() << "] ";
        TS_ASSERT(lastLine.find(expected.str()) != std::string::npos);

        remove(logFile);
    }

    void testComponentLogging()
    {
        const char* logFile = "testComponent.txt";
        Logger logger(logFile);
        logger.setComponent("TestComponent");

        logger.info("Component message");

        std::string lastLine = getLastLineFromFile(logFile);
        TS_ASSERT(lastLine.find("[TestComponent]") != std::string::npos);

        remove(logFile);
    }

    void testGlobalLogger()
    {
        Logger& global = logger();
        global.setLevel(Logger::INFO);
        global.info("Global logger test");

        Logger& global2 = logger();
        TS_ASSERT_EQUALS(&global, &global2);
    }

    void testFormatting()
    {
        const char* logFile = "testFormatting.txt";
        Logger logger(logFile);

        logger.info("Test %s %d", "number", 42);

        std::string lastLine = getLastLineFromFile(logFile);
        TS_ASSERT(lastLine.find("Test number 42") != std::string::npos);

        remove(logFile);
    }
};
